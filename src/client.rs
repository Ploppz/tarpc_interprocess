use tarpc_interprocess::*;
use interprocess::nonblocking::local_socket::*;

use tarpc::{context, rpc::client::Config, serde_transport::Transport};
use tokio_util::compat::FuturesAsyncReadCompatExt;

use tokio_serde::formats::Bincode;

#[tokio::main]
async fn main() -> std::io::Result<()> {
    let stream = LocalSocketStream::connect("/tmp/example.sock")
        .await
        .unwrap();
    let stream = stream.compat();
    let transport = Transport::from((stream, Bincode::default()));

    // WorldClient is generated by the service attribute. It has a constructor `new` that takes a
    // config and any Transport as input.
    let mut client = WorldClient::new(Config::default(), transport)
        .spawn()
        .unwrap();

    // The client has an RPC method for each RPC defined in the annotated trait. It takes the same
    // args as defined, with the addition of a Context, which is always the first arg. The Context
    // specifies a deadline and trace information which can be helpful in debugging requests.
    let hello = client
        .hello(context::current(), "Client".to_string())
        .await
        .unwrap();

    println!("Reply: {}", hello);

    Ok(())
}
